version: "2.1"

services:
  # ======================================
  # Infrastructure Services
  # ======================================

  serviceregistry:
    image: 'ebelemgnegre/serviceregistry:0.0.2'
    container_name: serviceregistry
    ports:
      - '8761:8761'
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  configserver:
    image: 'ebelemgnegre/configserver:0.0.2'
    container_name: configserver
    ports:
      - '9296:9296'
    environment:
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9296/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      serviceregistry:
        condition: service_healthy

  cloudgateway:
    image: 'ebelemgnegre/cloudgateway:0.0.2'
    container_name: cloudgateway
    ports:
      - '9090:9090'
    environment:
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=configserver
    networks:
      - microservices-network
    depends_on:
      configserver:
        condition: service_healthy

  # ======================================
  # Database Services
  # ======================================

  productDb:
    container_name: productDb
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: productDb
    ports:
      - "3306:3306"
    volumes:
      - product_db_data:/var/lib/mysql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  orderDb:
    container_name: orderDb
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orderDb
    ports:
      - "3307:3306"
    volumes:
      - order_db_data:/var/lib/mysql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  paymentDb:
    container_name: paymentDb
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: paymentDb
    ports:
      - "3308:3306"
    volumes:
      - payment_db_data:/var/lib/mysql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ======================================
  # Business Services
  # NOTE: Built from Dockerfile
  # Run: mvn clean package -DskipTests before docker-compose build
  # ======================================

  productservice:
    build:
      context: ./ProductService
      dockerfile: Dockerfile.prod
    image: 'productservice:latest'
    container_name: productservice
    ports:
      - '8081:8081'
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=configserver
      - DB_HOST=productDb
    networks:
      - microservices-network
    depends_on:
      productDb:
        condition: service_healthy
      configserver:
        condition: service_healthy
    restart: on-failure

  orderservice:
    build:
      context: ./OrderService
      dockerfile: Dockerfile.prod
    image: 'orderservice:latest'
    container_name: orderservice
    ports:
      - '8082:8082'
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=configserver
      - DB_HOST=orderDb
    networks:
      - microservices-network
    depends_on:
      orderDb:
        condition: service_healthy
      configserver:
        condition: service_healthy
    restart: on-failure

  paymentservice:
    build:
      context: ./PaymentService
      dockerfile: Dockerfile.prod
    image: 'paymentservice:latest'
    container_name: paymentservice
    ports:
      - '8083:8083'
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=configserver
      - DB_HOST=paymentDb
    networks:
      - microservices-network
    depends_on:
      paymentDb:
        condition: service_healthy
      configserver:
        condition: service_healthy
    restart: on-failure

networks:
  microservices-network:
    driver: bridge

volumes:
  product_db_data:
  order_db_data:
  payment_db_data: