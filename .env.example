# ==========================================
# Spring Boot Microservices - Environment Variables
# ==========================================
#
# This file contains all environment variables needed for the application.
#
# SETUP INSTRUCTIONS:
# 1. Copy this file:       cp .env.example .env
# 2. Fill in your actual values in .env
# 3. Never commit .env to git (it's already in .gitignore)
#

# ==========================================
# Auth0 Configuration (OAuth2 Authentication)
# ==========================================
#
# Auth0 Dashboard: https://manage.auth0.com/dashboard/us/dev-5nw6367bfpr277ec
# Auth0 Domain:    dev-5nw6367bfpr277ec.us.auth0.com
#
# ⚠️  IMPORTANT: You need TWO Auth0 applications for this microservices architecture:
#
#   1. Regular Web Application (for CloudGateway - user login via browser)
#      - Grant Types: Authorization Code, Refresh Token
#      - Used by: CloudGateway
#      - Purpose: Frontend user authentication
#
#   2. Machine-to-Machine Application (for backend services - service-to-service calls)
#      - Grant Types: Client Credentials
#      - Used by: OrderService, PaymentService, ProductService
#      - Purpose: Backend API calls without user context
#
# OPTION A: Use Regular Web App for ALL services (if Client Credentials grant is enabled)
# -----------------------------------------------------------------------------------------
# If your Regular Web Application has "Client Credentials" grant enabled:
#   - Use these credentials for both CloudGateway AND OrderService
#   - Check: Auth0 Dashboard > Applications > [Your Web App] > Settings > Advanced Settings > Grant Types
#   - Ensure: ✅ Authorization Code, ✅ Refresh Token, ✅ Client Credentials
#
# OPTION B: Use TWO separate applications (recommended for better security)
# -----------------------------------------------------------------------------------------
# If Client Credentials is NOT available in your Regular Web App:
#   - Use Regular Web App credentials below (for CloudGateway)
#   - Create separate M2M app and uncomment AUTH0_M2M_* variables below (for OrderService)
#   - Update OrderService configuration to use AUTH0_M2M_CLIENT_ID instead of AUTH0_CLIENT_ID
#

# Client ID from your Auth0 Regular Web Application
# How to get:
#   1. Go to Applications > [Your Regular Web App Name] > Settings
#   2. Copy the "Client ID" value
#   3. Configure Callback URLs: http://localhost:9090/login/oauth2/code/auth0
#   4. Configure Logout URLs: http://localhost:9090
#   5. Configure Web Origins: http://localhost:3000,http://localhost:4200,http://localhost:5173
#
AUTH0_CLIENT_ID=your_web_app_client_id_here

# Client Secret from your Auth0 Regular Web Application
# How to get:
#   1. Go to Applications > [Your Regular Web App Name] > Settings
#   2. Copy the "Client Secret" value
#   ⚠️  Keep this secret! Never commit to git
#
AUTH0_CLIENT_SECRET=your_web_app_client_secret_here

# (OPTIONAL) Machine-to-Machine Application Credentials
# Uncomment and use these if you created a separate M2M app for service-to-service calls
# You'll also need to update OrderService/PaymentService/ProductService application configs
#
# AUTH0_M2M_CLIENT_ID=your_m2m_client_id_here
# AUTH0_M2M_CLIENT_SECRET=your_m2m_client_secret_here

# API Identifier (Audience) from your Auth0 API
# How to get:
#   1. Go to Applications > APIs > [Your API Name] > Settings
#   2. Copy the "Identifier" value (usually a URI like https://api.example.com)
#
# Default: http://springboot-microservices-api
AUTH0_AUDIENCE=http://springboot-microservices-api

# Auth0 Issuer URI (OAuth2 Authorization Server)
# How to get:
#   1. Your Auth0 domain + trailing slash
#   2. Format: https://YOUR_DOMAIN.us.auth0.com/
#   3. Example: https://dev-5nw6367bfpr277ec.us.auth0.com/
#
# Default: https://dev-5nw6367bfpr277ec.us.auth0.com/
AUTH0_ISSUER_URI=https://dev-5nw6367bfpr277ec.us.auth0.com/

# ==========================================
# Optional: Override Default Configurations
# ==========================================

# Spring Profile (default: dev)
# SPRING_PROFILES_ACTIVE=dev

# Eureka Server Address (default: http://serviceregistry:8761/eureka)
# EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka

# Config Server URL (default: configserver)
# CONFIG_SERVER_URL=configserver

# ==========================================
# How to Use
# ==========================================
#
# After setting your values:
#
#   docker-compose -f docker-compose.dev.yml up -d
#
# Docker Compose will automatically load variables from .env
#
# To verify environment variables are loaded:
#   docker-compose -f docker-compose.dev.yml config
#
# To test Auth0 connection:
#   curl --request POST \
#     --url https://dev-5nw6367bfpr277ec.us.auth0.com/oauth/token \
#     --header 'content-type: application/json' \
#     --data '{
#       "client_id":"YOUR_CLIENT_ID",
#       "client_secret":"YOUR_CLIENT_SECRET",
#       "audience":"YOUR_AUDIENCE",
#       "grant_type":"client_credentials"
#     }'
#
# ==========================================
# Need Help?
# ==========================================
#
# Auth0 Setup Guide: See README.md section "Configure OAuth2 (Auth0)"
# Auth0 Documentation: https://auth0.com/docs
#
# Common Issues:
#   - 401 Unauthorized: Check client_id and client_secret are correct
#   - Invalid audience: Verify AUTH0_AUDIENCE matches your API identifier
#   - Token request fails: Ensure M2M app is authorized for your API
#
